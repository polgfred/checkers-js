{"version":3,"file":"worker-bundle.js","mappings":"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","sources":["webpack://checkers/./src/core/types.ts","webpack://checkers/./src/core/utils.ts","webpack://checkers/./src/core/rules.ts","webpack://checkers/./src/core/evaluator.ts","webpack://checkers/./src/core/default_evaluator.ts","webpack://checkers/./src/core/analyzer.ts","webpack://checkers/./src/worker.ts"],"sourcesContent":["export type BoardType = Int8Array[];\nexport type SegmentType =\n  | readonly [number, number]\n  | readonly [number, number, number, number];\nexport type MoveType = readonly SegmentType[];\nexport type _MutableMoveType = SegmentType[]; // used internally to build up moves\nexport interface TreeType {\n  [key: string]: TreeType;\n}\nexport type FormationType = readonly [number, number, PieceType][];\nexport type ScoresType = readonly [FormationType, number][][][];\n\nexport enum SideType {\n  RED = 1,\n  WHT = -1,\n}\n\nexport enum PieceType {\n  EMPTY = 0,\n  RED_PIECE = 1,\n  RED_KING = 2,\n  RED_EITHER = 3,\n  WHT_PIECE = -1,\n  WHT_KING = -2,\n  WHT_EITHER = -3,\n}\n\nexport function isPieceOf(side: SideType, piece: PieceType): boolean {\n  return (\n    (side === SideType.RED && piece === PieceType.RED_PIECE) ||\n    (side === SideType.WHT && piece === PieceType.WHT_PIECE)\n  );\n}\n\nexport function isKingOf(side: SideType, piece: PieceType): boolean {\n  return (\n    (side === SideType.RED && piece === PieceType.RED_KING) ||\n    (side === SideType.WHT && piece === PieceType.WHT_KING)\n  );\n}\n","import { BoardType, MoveType, PieceType } from './types';\n\n// set up the initial board position\nconst initial: BoardType = as2DArray(new ArrayBuffer(64));\ninitial[0][0] = initial[0][2] = initial[0][4] = initial[0][6] = 1;\ninitial[1][1] = initial[1][3] = initial[1][5] = initial[1][7] = 1;\ninitial[2][0] = initial[2][2] = initial[2][4] = initial[2][6] = 1;\ninitial[5][1] = initial[5][3] = initial[5][5] = initial[5][7] = -1;\ninitial[6][0] = initial[6][2] = initial[6][4] = initial[6][6] = -1;\ninitial[7][1] = initial[7][3] = initial[7][5] = initial[7][7] = -1;\n\n// make a copy of the initial board position\nexport function newBoard(): BoardType {\n  return copyBoard(initial);\n}\n\n// only use this on boards that are backed by a shared buffer!\nexport function copyBoard(board: BoardType): BoardType {\n  return as2DArray(board[0].buffer.slice(0));\n}\n\n// make a new board from the passed in array data\nexport function newBoardFromData(data: readonly PieceType[][]): BoardType {\n  const board = as2DArray(new ArrayBuffer(64));\n  for (let i = 0; i < 8; ++i) {\n    board[i].set(data[i]);\n  }\n  return board;\n}\n\n// make a 2d array wrapper around a 64-byte buffer\nexport function as2DArray(buf: ArrayBuffer): BoardType {\n  return [\n    new Int8Array(buf, 0, 8),\n    new Int8Array(buf, 8, 8),\n    new Int8Array(buf, 16, 8),\n    new Int8Array(buf, 24, 8),\n    new Int8Array(buf, 32, 8),\n    new Int8Array(buf, 40, 8),\n    new Int8Array(buf, 48, 8),\n    new Int8Array(buf, 56, 8),\n  ];\n}\n\nexport function coordsToNumber(x: number, y: number): number {\n  return ((y + 1) << 2) - (x >> 1);\n}\n\nexport function moveToString(move: MoveType): string {\n  if (move) {\n    const [x, y] = move[0];\n    let str = String(coordsToNumber(x, y));\n\n    for (let i = 1; i < move.length; ++i) {\n      const [nx, ny] = move[i];\n\n      str += move[i].length > 2 ? ' x ' : ' - ';\n      str += coordsToNumber(nx, ny);\n    }\n\n    return str;\n  }\n}\n","import { copyBoard } from './utils';\n\nimport {\n  BoardType,\n  MoveType,\n  SideType,\n  PieceType,\n  TreeType,\n  isPieceOf,\n  isKingOf,\n  _MutableMoveType,\n} from './types';\n\nconst { RED } = SideType;\nconst { EMPTY } = PieceType;\n\nexport interface Rules {\n  readonly getBoard: () => BoardType;\n  readonly getSide: () => SideType;\n  readonly findJumps: () => readonly MoveType[];\n  readonly findMoves: () => readonly MoveType[];\n  readonly findPlays: () => readonly MoveType[];\n  readonly doJump: (jump: MoveType) => () => void;\n  readonly doMove: (move: MoveType) => () => void;\n  readonly doPlay: (play: MoveType) => () => void;\n  readonly buildTree: () => TreeType;\n}\n\nexport function makeRules(_board: BoardType, side: SideType): Rules {\n  // don't mutate the caller's board\n  const board = copyBoard(_board);\n\n  function findJumps() {\n    const top = side === RED ? 7 : 0;\n    const out = top + side;\n    const bottom = top ^ 7;\n    const jumps = [] as MoveType[];\n\n    // loop through playable squares\n    for (let y = bottom; y !== out; y += side) {\n      for (let x = bottom; x !== out; x += side) {\n        // see if it's our piece\n        const p: PieceType = board[y][x];\n\n        if (side === RED ? p > 0 : p < 0) {\n          // checking for jumps is inherently recursive - as long as you find them,\n          // you have to keep looking, and only termimal positions are valid\n          nextJump([[x, y]], jumps);\n        }\n      }\n    }\n\n    return jumps;\n  }\n\n  function nextJump(cur: _MutableMoveType, jumps: MoveType[]) {\n    const [x, y] = cur[cur.length - 1];\n    const p: PieceType = board[y][x];\n    const top = side === RED ? 7 : 0;\n    const king = isKingOf(side, p);\n    let found = false;\n\n    // loop over directions (dx, dy) from the current square\n    for (let dy = king ? -1 : 1; dy <= 1; dy += 2) {\n      for (let dx = -1; dx <= 1; dx += 2) {\n        let mx: number;\n        let my: number;\n        let nx: number;\n        let ny: number;\n\n        // calculate middle and landing coordinates\n        if (side === 1) {\n          mx = x + dx;\n          my = y + dy;\n          nx = mx + dx;\n          ny = my + dy;\n        } else {\n          mx = x - dx;\n          my = y - dy;\n          nx = mx - dx;\n          ny = my - dy;\n        }\n\n        // see if jump is on the board\n        if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {\n          const m: PieceType = board[my][mx];\n          const n: PieceType = board[ny][nx];\n\n          // see if the middle piece is an opponent and the landing is open\n          if (n === EMPTY && (side === RED ? m < 0 : m > 0)) {\n            const crowned = !king && ny === top;\n            found = true;\n\n            // keep track of the coordinates, and move the piece\n            board[y][x] = EMPTY;\n            board[my][mx] = EMPTY;\n            board[ny][nx] = crowned ? p << 1 : p;\n\n            // if we're crowned, or there are no further jumps from here,\n            // we've reached a terminal position\n            cur.push([nx, ny, mx, my]);\n            if (crowned || !nextJump(cur, jumps)) {\n              jumps.push(cur.slice());\n            }\n\n            // put things back where we found them\n            cur.pop();\n            board[y][x] = p;\n            board[my][mx] = m;\n            board[ny][nx] = EMPTY;\n          }\n        }\n      }\n    }\n\n    // return whether more jumps were found from this position\n    return found;\n  }\n\n  function doJump(jump: MoveType) {\n    const len = jump.length;\n    const [x, y] = jump[0];\n    const [fx, fy] = jump[len - 1];\n    const p: PieceType = board[y][x];\n    const top = side === RED ? 7 : 0;\n    const crowned = isPieceOf(side, p) && fy === top;\n    const cap = new Array(len) as number[];\n\n    // remove the initial piece\n    cap[0] = p;\n    board[y][x] = EMPTY;\n\n    // loop over the passed in coords\n    for (let i = 1; i < len; ++i) {\n      const [, , mx, my] = jump[i];\n\n      // perform the jump\n      cap[i] = board[my][mx];\n      board[my][mx] = EMPTY;\n    }\n\n    // final piece\n    board[fy][fx] = crowned ? p << 1 : p;\n\n    // switch sides\n    side = -side;\n\n    // reverse the jump\n    return () => {\n      // remove the final piece\n      board[fy][fx] = EMPTY;\n\n      // loop over the passed in coords in reverse\n      for (let i = len - 1; i > 0; --i) {\n        const [, , mx, my] = jump[i];\n\n        // put back the captured piece\n        board[my][mx] = cap[i];\n      }\n\n      // put back initial piece\n      board[y][x] = p;\n\n      // switch back to original side\n      side = -side;\n    };\n  }\n\n  function findMoves() {\n    const top = side === RED ? 7 : 0;\n    const out = top + side;\n    const bottom = top ^ 7;\n    const moves = [] as MoveType[];\n\n    // loop through playable squares\n    for (let y = bottom; y !== out; y += side) {\n      for (let x = bottom; x !== out; x += side) {\n        const p: PieceType = board[y][x];\n        const king = isKingOf(side, p);\n\n        // see if it's our piece\n        if (side === RED ? p > 0 : p < 0) {\n          // loop over directions (dx, dy) from the current square\n          for (let dy = king ? -1 : 1; dy <= 1; dy += 2) {\n            for (let dx = -1; dx <= 1; dx += 2) {\n              let nx: number;\n              let ny: number;\n\n              // calculate landing coordinates\n              if (side === RED) {\n                nx = x + dx;\n                ny = y + dy;\n              } else {\n                nx = x - dx;\n                ny = y - dy;\n              }\n\n              // see if move is on the board\n              if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {\n                // see if the landing is open\n                if (board[ny][nx] === EMPTY) {\n                  moves.push([\n                    [x, y],\n                    [nx, ny],\n                  ]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return moves;\n  }\n\n  function doMove(move: MoveType) {\n    const [[x, y], [nx, ny]] = move;\n    const p: PieceType = board[y][x];\n    const top = side === RED ? 7 : 0;\n    const crowned = isPieceOf(side, p) && ny === top;\n\n    // perform the jump\n    board[y][x] = EMPTY;\n    board[ny][nx] = crowned ? p << 1 : p;\n\n    // switch sides\n    side = -side;\n\n    // reverse the move\n    return () => {\n      // put things back where we found them\n      board[ny][nx] = EMPTY;\n      board[y][x] = p;\n\n      // switch back\n      side = -side;\n    };\n  }\n\n  function findPlays() {\n    // you have to jump if you can\n    const jumps = findJumps();\n    if (jumps.length) {\n      return jumps;\n    } else {\n      return findMoves();\n    }\n  }\n\n  function doPlay(play: MoveType) {\n    // if the second segment has coords for the jumped piece,\n    // it has to be a jump\n    if (play[1].length > 2) {\n      return doJump(play);\n    } else {\n      return doMove(play);\n    }\n  }\n\n  function buildTree() {\n    const plays = findPlays();\n    const tree: TreeType = {};\n\n    for (let i = 0; i < plays.length; ++i) {\n      const play = plays[i];\n      let root = tree;\n\n      for (let j = 0; j < play.length; ++j) {\n        const [x, y] = play[j];\n        const k = `${x},${y}`;\n\n        root[k] = root[k] || {};\n        root = root[k];\n      }\n    }\n\n    return tree;\n  }\n\n  return {\n    getBoard: () => board,\n    getSide: () => side,\n    findJumps,\n    findMoves,\n    findPlays,\n    doJump,\n    doMove,\n    doPlay,\n    buildTree,\n  };\n}\n","import { BoardType, FormationType, ScoresType, PieceType } from './types';\n\nconst {\n  EMPTY,\n  WHT_PIECE,\n  WHT_KING,\n  WHT_EITHER,\n  RED_PIECE,\n  RED_KING,\n  RED_EITHER,\n} = PieceType;\n\nexport interface Evaluator {\n  getScores: () => ScoresType;\n  addFormation: (formation: FormationType, scores: readonly number[][]) => void;\n  evaluate: (board: BoardType) => number;\n}\n\nexport function makeEvaluator(): Evaluator {\n  // scores are represented as a 2D array of [pattern, score] pairs, where:\n  //  - `pattern` is an array of [dx, dy, value] triples, and\n  //  - `score` is what will be awarded if the pattern matches\n  const scores = [[], [], [], [], [], [], [], []] as ScoresType;\n\n  function addFormation(formation: FormationType, values: readonly number[][]) {\n    // `formation` takes the form [[dx, dy, v], [dx, dy, v], ...], where:\n    //  - (dx, dy) is the offset from the origin of the formation, and\n    //  - v is the value to match against:\n    //    -  0: an empty square\n    //    - +1: a regular piece on my side\n    //    - +2: a king on my side\n    //    - +3: any piece on my side\n    //    - -1: a regular piece on my opponent's side\n    //    - -2: a king on my opponent's side\n    //    - -3: any piece on my opponent's side\n    // `values` is an 8x8 array of values representing the bonus (or penalty)\n    //    awarded when the formation's origin matches the given position\n\n    // push on the pattern and score for each non-zero slot\n    for (let y = 0; y < 8; ++y) {\n      for (let x = 0; x < 8; ++x) {\n        const value = values[y][x];\n\n        if (value !== 0) {\n          scores[y][x] = scores[y][x] || [];\n          scores[y][x].push([formation, value]);\n        }\n      }\n    }\n  }\n\n  function evaluate(board: BoardType) {\n    // match the board and side against the formations and return a score:\n    //  - for each square on the board, get the set of formations on it\n    //  - for each formation, see if it applies to red (+) from the top of\n    //      the board, or white (-) from the bottom, and adjust the total\n    //      score accordingly\n    let total = 0;\n\n    for (let y = 0; y < 8; ++y) {\n      for (let x = 0; x < 8; ++x) {\n        const r = scores[y][x];\n\n        if (r) {\n          for (let j = 0; j < r.length; ++j) {\n            const [formation, score] = r[j];\n            let match: boolean;\n\n            // try the pattern as red\n            match = true;\n            for (let k = 0; k < formation.length; ++k) {\n              const [dx, dy, v] = formation[k];\n              const p = board[y + dy][x + dx];\n\n              // see if the formation matches for this square\n              if (\n                !(\n                  (v === EMPTY && p === EMPTY) ||\n                  ((v === RED_PIECE || v === RED_EITHER) && p === RED_PIECE) ||\n                  ((v === RED_KING || v === RED_EITHER) && p === RED_KING) ||\n                  ((v === WHT_PIECE || v === WHT_EITHER) && p === WHT_PIECE) ||\n                  ((v === WHT_KING || v === WHT_EITHER) && p === WHT_KING)\n                )\n              ) {\n                // bail out and flag as failed\n                match = false;\n                break;\n              }\n            }\n            if (match) {\n              total += score;\n            }\n\n            // try the pattern as white\n            match = true;\n            for (let k = 0; k < formation.length; ++k) {\n              const [dx, dy, v] = formation[k];\n              const p = board[(y ^ 7) - dy][(x ^ 7) - dx];\n\n              // see if the pattern matches for this square\n              if (\n                !(\n                  (v === EMPTY && p === EMPTY) ||\n                  ((v === RED_PIECE || v === RED_EITHER) && p === WHT_PIECE) ||\n                  ((v === RED_KING || v === RED_EITHER) && p === WHT_KING) ||\n                  ((v === WHT_PIECE || v === WHT_EITHER) && p === RED_PIECE) ||\n                  ((v === WHT_KING || v === WHT_EITHER) && p === RED_KING)\n                )\n              ) {\n                // bail out and flag as failed\n                match = false;\n                break;\n              }\n            }\n            if (match) {\n              total -= score;\n            }\n          }\n        }\n      }\n    }\n\n    return total;\n  }\n\n  return {\n    getScores: () => scores,\n    addFormation,\n    evaluate,\n  };\n}\n","import { makeEvaluator } from './evaluator';\n\nconst defaultEvaluator = makeEvaluator();\n\n// basic piece values\ndefaultEvaluator.addFormation(\n  [[0, 0, 1]],\n  // prettier-ignore\n  [ \n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n    [ 50,  0, 50,  0, 50,  0, 50,  0 ],\n    [  0, 50,  0, 50,  0, 50,  0, 50 ],\n    [ 50,  0, 50,  0, 50,  0, 50,  0 ],\n    [  0, 50,  0, 50,  0, 50,  0, 50 ],\n    [ 50,  0, 50,  0, 50,  0, 50,  0 ],\n    [  0, 50,  0, 50,  0, 50,  0, 50 ],\n    [ 50,  0, 50,  0, 50,  0, 50,  0 ],\n   ].reverse()\n);\n\n// basic king values\ndefaultEvaluator.addFormation(\n  [[0, 0, 2]],\n  // prettier-ignore\n  [ \n    [  0, 60,  0, 60,  0, 60,  0, 60 ],\n    [ 60,  0, 60,  0, 60,  0, 60,  0 ],\n    [  0, 60,  0, 60,  0, 60,  0, 60 ],\n    [ 60,  0, 60,  0, 60,  0, 60,  0 ],\n    [  0, 60,  0, 60,  0, 60,  0, 60 ],\n    [ 60,  0, 60,  0, 60,  0, 60,  0 ],\n    [  0, 60,  0, 60,  0, 60,  0, 60 ],\n    [ 60,  0, 60,  0, 60,  0, 60,  0 ],\n   ].reverse()\n);\n\n// offensive lines\ndefaultEvaluator.addFormation(\n  [\n    [0, 0, 3],\n    [1, -1, 3],\n  ],\n  // prettier-ignore\n  [ \n    [  0, 12,  0,  8,  0,  0,  0,  0 ],\n    [ 12,  0, 10,  0,  6,  0,  0,  0 ],\n    [  0, 10,  0,  8,  0,  4,  0,  0 ],\n    [  8,  0,  8,  0,  6,  0,  2,  0 ],\n    [  0,  6,  0,  6,  0,  4,  0,  0 ],\n    [  0,  0,  4,  0,  4,  0,  2,  0 ],\n    [  0,  0,  0,  2,  0,  2,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n   ].reverse()\n);\n\n// offensive 3-lines\ndefaultEvaluator.addFormation(\n  [\n    [0, 0, 3],\n    [1, -1, 3],\n    [2, -2, 3],\n  ],\n  // prettier-ignore\n  [ \n    [  0, 12,  0,  8,  0,  0,  0,  0 ],\n    [ 12,  0, 10,  0,  6,  0,  0,  0 ],\n    [  0, 10,  0,  8,  0,  4,  0,  0 ],\n    [  8,  0,  8,  0,  6,  0,  0,  0 ],\n    [  0,  6,  0,  6,  0,  4,  0,  0 ],\n    [  0,  0,  4,  0,  4,  0,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n   ].reverse()\n);\n\n// triangle bases\ndefaultEvaluator.addFormation(\n  [\n    [0, 0, 3],\n    [1, -1, 3],\n    [-1, -1, 3],\n  ],\n  // prettier-ignore\n  [ \n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n    [  0,  0, 12,  0,  8,  0,  4,  0 ],\n    [  0,  8,  0, 12,  0,  8,  0,  0 ],\n    [  0,  0,  8,  0, 12,  0,  8,  0 ],\n    [  0,  4,  0, 12,  0, 12,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n   ].reverse()\n);\n\n// defensive lines\ndefaultEvaluator.addFormation(\n  [\n    [0, 0, 3],\n    [-1, -1, 3],\n  ],\n  // prettier-ignore\n  [ \n    [  0,  0,  0,  0,  0, 10,  0, 16 ],\n    [  0,  0,  0,  0,  8,  0, 12,  0 ],\n    [  0,  0,  0,  6,  0, 10,  0, 10 ],\n    [  0,  0,  4,  0,  8,  0,  8,  0 ],\n    [  0,  2,  0,  6,  0,  6,  0,  0 ],\n    [  0,  0,  4,  0,  4,  0,  0,  0 ],\n    [  0,  2,  0,  2,  0,  0,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n   ].reverse()\n);\n\n// defensive 3-lines\ndefaultEvaluator.addFormation(\n  [\n    [0, 0, 3],\n    [-1, -1, 3],\n    [-2, -2, 3],\n  ],\n  // prettier-ignore\n  [ \n    [  0,  0,  0,  0,  0, 10,  0, 16 ],\n    [  0,  0,  0,  0,  8,  0, 12,  0 ],\n    [  0,  0,  0,  6,  0, 10,  0, 10 ],\n    [  0,  0,  4,  0,  8,  0,  8,  0 ],\n    [  0,  0,  0,  6,  0,  6,  0,  0 ],\n    [  0,  0,  4,  0,  4,  0,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n    [  0,  0,  0,  0,  0,  0,  0,  0 ],\n   ].reverse()\n);\n\nexport default defaultEvaluator;\n","import { BoardType, MoveType, SideType } from './types';\nimport { makeRules } from './rules';\nimport { Evaluator } from './evaluator';\nimport defaultEvaluator from './default_evaluator';\n\nconst { RED, WHT } = SideType;\n\n// how many levels deep to search the tree\nconst LEVEL = 8;\n\nexport function analyze(\n  board: BoardType,\n  side: SideType,\n  player: Evaluator = defaultEvaluator\n): readonly [MoveType, number] {\n  // make the rules for the current position\n  const { getBoard, getSide, findJumps, doJump, findMoves, doMove } = makeRules(\n    board,\n    side\n  );\n\n  function loop(level: number) {\n    const board = getBoard();\n    const side = getSide();\n    let bestScore = side / -0;\n    let bestPlay: MoveType;\n    let current: number;\n\n    // if there are jumps from this position, keep searching\n    const jumps = findJumps();\n    if (jumps.length) {\n      // analyze counter-jumps from this position\n      for (let i = 0; i < jumps.length; ++i) {\n        const jump = jumps[i];\n\n        // perform the jump and descend a level\n        const reverse = doJump(jump);\n        current = loop(level - 1)[1];\n        reverse();\n\n        // keep track of the best move from this position\n        if (\n          (side === RED && current > bestScore) ||\n          (side === WHT && current < bestScore)\n        ) {\n          bestPlay = jump;\n          bestScore = current;\n        }\n      }\n    } else if (level > 0) {\n      // analyze counter-moves from this position\n      const moves = findMoves();\n\n      for (let i = 0; i < moves.length; ++i) {\n        const move = moves[i];\n\n        // perform the jump and descend a level\n        const reverse = doMove(move);\n        current = loop(level - 1)[1];\n        reverse();\n\n        // keep track of the best move from this position\n        if (\n          (side === RED && current > bestScore) ||\n          (side === WHT && current < bestScore)\n        ) {\n          bestPlay = move;\n          bestScore = current;\n        }\n      }\n    } else {\n      // we've hit bottom and there are no jumps, so just return\n      // the score for this position\n      bestScore = player.evaluate(board);\n    }\n\n    // a pair representing the winning play and score for this turn\n    return [bestPlay, bestScore] as const;\n  }\n\n  // start the descent\n  return loop(LEVEL);\n}\n","import { BoardType, SideType } from './core/types';\nimport { analyze } from './core/analyzer';\n\n// tell typescript that we're in a web worker, as the\n// postMessage API is slightly different\ndeclare const self: Worker;\n\nself.addEventListener(\n  'message',\n  (ev: { data: { board: BoardType; side: SideType } }) => {\n    const { board, side } = ev.data;\n    const [move] = analyze(board, side);\n    self.postMessage({ move });\n  },\n  false\n);\n"],"names":["SideType","PieceType","isPieceOf","side","piece","RED","RED_PIECE","WHT","WHT_PIECE","isKingOf","RED_KING","WHT_KING","initial","as2DArray","ArrayBuffer","copyBoard","board","buffer","slice","buf","Int8Array","EMPTY","WHT_EITHER","RED_EITHER","defaultEvaluator","scores","getScores","addFormation","formation","values","y","x","value","push","evaluate","total","r","j","length","score","match","k","dx","dy","v","p","makeEvaluator","reverse","analyze","player","getBoard","getSide","findJumps","doJump","findMoves","doMove","_board","top","out","bottom","jumps","nextJump","cur","king","found","mx","my","nx","ny","m","crowned","pop","jump","len","fx","fy","cap","Array","i","moves","move","findPlays","doPlay","play","buildTree","plays","tree","root","makeRules","loop","level","bestPlay","current","bestScore","self","addEventListener","ev","data","postMessage"],"sourceRoot":""}